#include<stdio.h>
#include<string.h>

int main()
{
	char data[50],stuff[50],dstuff[50];
	int i,j,count,length;
	printf("enter the data\n");
	scanf("%s",data);	
	length=strlen(data);
	count=0,j=0;
	for (i=0;i<length;i++)
	{
		if(data[i]=='1')
		{
			count++;
			
		}
		else
		{
			count=0;
		}
		stuff[j]=data[i];
		j++;
		if(count==5 && data[i+1]=='1')
		{
			stuff[j]='0';
		j++;
		count=0;
		}	
	}
	stuff[j]='\0';
	printf("stuffed data at intermediate site is \n 01111110   %s   01111110 \n",stuff);
///destuffing
	
	length=strlen(stuff);
	count=0;j=0;
	for(i=0;i<length;i++)
	{
		if(stuff[i]=='1')
		{
			count++;
		}
		else
		{
			count=0;
		}
		dstuff[j]=stuff[i];
		j++;
		if(count==5 && stuff[i+1]=='0')
		{
			count=0;
			i++;
		}
	}

dstuff[j]='\0';
printf("\n\ndestuffed data : %s",dstuff);		
		
}

Output:
enter the data                                                                                                                       
11011111101101                                                                                                                       
stuffed data at intermediate site is                                                                                                 
 01111110   110111110101101   01111110  
destuffed data : 11011111101101  

///program-2/////

#include<stdio.h>
#include<string.h>
void main()
{
int i=0,j=0,n,pos;
char a[20],b[50],ch;
printf("enter string\n");
scanf("%s",&a);
n=strlen(a);
printf("enter position\n");
scanf("%d",&pos);
if(pos>n)
{
printf("invalid position, Enter again :");
scanf("%d",&pos);
}
printf("enter the character\n");
ch=getchar();
 
b[0]='d';
b[1]='l';
b[2]='e';
b[3]='s';
b[4]='t';
b[5]='x';
j=6;
while(i<n)
{
if(i==pos-1)
{
b[j]='d';
b[j+1]='l';
b[j+2]='e';
b[j+3]=ch;
b[j+4]='d';
b[j+5]='l';
b[j+6]='e';
j=j+7;
}
if(a[i]=='d' && a[i+1]=='l' && a[i+2]=='e')
{
b[j]='d';
b[j+1]='l';
b[j+2]='e';
j=j+3;
}
 
b[j]=a[i];
i++;
j++;
}
b[j]='d';
b[j+1]='l';
b[j+2]='e';
b[j+3]='e';
b[j+4]='t';
b[j+5]='x';
b[j+6]='\0';
printf("\nframe after stuffing:\n");
printf("%s",b);
}

Output:
enter string                                                                                                                         
SAMBHRAM                                                                                                                             
enter position                                                                                                                       
5                                                                                                                                    
enter the character 
frame after stuffing:                                                                                                                
dlestxSAMBdle                                                                                                                        
dleHRAMdleetx 

////Exp -2////

#include<stdio.h>
#include<stdlib.h>

struct node
{
	int dist[15];
	int from[15];
};

int main()
{
	int a[15][15],n=0,i,j,k,count;
	struct node s[10];
	printf("enter number of nodes\n");
	scanf("%d",&n);
	printf("enter matrix\n");
	for(i=1;i<=n;i++)
	{
		for(j=1;j<=n;j++)
		{
			scanf("%d",&a[i][j]);
			s[i].dist[j]=a[i][j];//read it as from i to j distance is a[i][j]
			s[i].from[j]=j; // read it as from i to j next node is j
		}
	}
	//remember floyd's algorithm? all pairs shortest path, apply the same logic!
	do
	{
		count=0;
		for(k=1;k<=n;k++)
		{
			for(i=1;i<=n;i++)
			{
				for(j=1;j<=n;j++)
				{
					if(s[i].dist[j] > a[i][k] + s[k].dist[j])
					{
						s[i].dist[j] = a[i][k] + s[k].dist[j];
						s[i].from[j]=k;
						count++;
					}
				}
			}
		}
	}while(count!=0);
	for(i=1;i<=n;i++)
	{
		for(j=1;j<=n;j++)
		{
			printf("Src : %d -> Dest : %d Next node : %d Distance : %d\n",i,j,s[i].from[j],s[i].dist[j]);
		}
		printf("\n");
	}
}

Output:
enter number of nodes                                                                                                                  
7                                                                                                                                      
enter matrix                                                                                                                           
0 1 1 2 1 1 2                                                                                                                          
1 0 1 2 2 2 3                                                                                                                          
1 1 0 1 2 2 2                                                                                                                          
2 2 1 0 3 2 1                                                                                                                          
1 2 2 3 0 2 3                                                                                                                          
1 2 2 2 2 0 1                                                                                                                          
2 3 2 1 3 1 0   
                                                                                                                       
Src : 1 > Dest : 1 Next node : 1 Distance : 0                                                                                      
Src : 1 > Dest : 2 Next node : 2 Distance : 1                                                                                      
Src : 1 > Dest : 3 Next node : 3 Distance : 1                                                                                      
Src : 1 > Dest : 4 Next node : 4 Distance : 2                                                                                      
Src : 1 > Dest : 5 Next node : 5 Distance : 1                                                                                      
Src : 1 > Dest : 6 Next node : 6 Distance : 1                                                                                      
Src : 1 > Dest : 7 Next node : 7 Distance : 2                                                                                      
                                                                                                                                       
Src : 2 > Dest : 1 Next node : 1 Distance : 1                                                                                      
Src : 2 > Dest : 2 Next node : 2 Distance : 0                                                                                      
Src : 2 > Dest : 3 Next node : 3 Distance : 1                                                                                      
Src : 2 > Dest : 4 Next node : 4 Distance : 2                                                                                      
Src : 2 > Dest : 5 Next node : 5 Distance : 2                                                                                      
Src : 2 > Dest : 6 Next node : 6 Distance : 2                                                                                      
Src : 2 -> Dest : 7 Next node : 7 Distance : 3

Src : 3 > Dest : 1 Next node : 1 Distance : 1                                                                                     
Src : 3 > Dest : 2 Next node : 2 Distance : 1                                                                                      
Src : 3 > Dest : 3 Next node : 3 Distance : 0                                                                                      
Src : 3 > Dest : 4 Next node : 4 Distance : 1                                                                                      
Src : 3 > Dest : 5 Next node : 5 Distance : 2                                                                                      
Src : 3 > Dest : 6 Next node : 6 Distance : 2                                                                                      
Src : 3 > Dest : 7 Next node : 7 Distance : 2                                                                                      
                                                                                                                                       
Src : 4 > Dest : 1 Next node : 1 Distance : 2                                                                                      
Src : 4 > Dest : 2 Next node : 2 Distance : 2                                                                                      
Src : 4 > Dest : 3 Next node : 3 Distance : 1                                                                                      
Src : 4 > Dest : 4 Next node : 4 Distance : 0                                                                                      
Src : 4 > Dest : 5 Next node : 5 Distance : 3                                                                                      
Src : 4 > Dest : 6 Next node : 6 Distance : 2                                                                                      
Src : 4 > Dest : 7 Next node : 7 Distance : 1                                                                                      
                                                                                                                                       
Src : 5 > Dest : 1 Next node : 1 Distance : 1                                                                                      
Src : 5 > Dest : 2 Next node : 2 Distance : 2                                                                                      
Src : 5 > Dest : 3 Next node : 3 Distance : 2                                                                                      
Src : 5 > Dest : 4 Next node : 4 Distance : 3                                                                                      
Src : 5 > Dest : 5 Next node : 5 Distance : 0                                                                                       
Src : 5 > Dest : 6 Next node : 6 Distance : 2                                                                                      
Src : 5 -> Dest : 7 Next node : 7 Distance : 3 

Src : 6 > Dest : 1 Next node : 1 Distance : 1                                                                                      
Src : 6 > Dest : 2 Next node : 2 Distance : 2                                                                                      
Src : 6 > Dest : 3 Next node : 3 Distance : 2                                                                                      
Src : 6 > Dest : 4 Next node : 4 Distance : 2                                                                                      
Src : 6 > Dest : 5 Next node : 5 Distance : 2                                                                                      
Src : 6 > Dest : 6 Next node : 6 Distance : 0                                                                                      
Src : 6 > Dest : 7 Next node : 7 Distance : 1                                                                                      
                                                                                                                                       
Src : 7 > Dest : 1 Next node : 1 Distance : 2                                                                                      
Src : 7 > Dest : 2 Next node : 2 Distance : 3                                                                                      
Src : 7 > Dest : 3 Next node : 3 Distance : 2                                                                                      
Src : 7 > Dest : 4 Next node : 4 Distance : 1                                                                                      
Src : 7 > Dest : 5 Next node : 5 Distance : 3                                                                                      
Src : 7 > Dest : 6 Next node : 6 Distance : 1                                                                                      
Src : 7 -> Dest : 7 Next node : 7 Distance : 0 

//EXP-3-Dijkstra's Algorithm//

#include <stdio.h>
#include <stdlib.h>

/**
 * contant to represent infinity
 * it is assumed that no edge in the vertex will have weight equal
 * to this value.
 */
#define INF 9999

// total number of vertices in the graph//


#define V 4


// this function will return the minimum value//
int findMin(int x, int y) {
  if (x < y) {
    return x;
  }
  return y;
}

// this function will check if the vertex is marked//

int isMarked(int v, int markedVertices[], int markedVerticesIdx) 
{

  int i = 0;
  for (i = 0; i < markedVerticesIdx; i++) {
    if (v == markedVertices[i]) {
      return 1;
    }
  }

  return 0;
}

// this function will find shortest path between source and destination vertex//

void dijkstra(int graph[V][V], int src, int dest) 
{

  //variables
  int i, r, c,
    tmpC,
    min,
    currVertex,
    edgeWt = 0,
    destValue = 0,
    markedValue = 0,
    wtTableR = 0,
    markedVerticesIdx = 0;

  // array containing vertices in the shortest path//

  int shortestPathVertices[V] = {-1};
  int shortestPathVerticesIdx = 0;
  
 

 // this table will hold the weight//

  int weightTable[V][V];
  for (r = 0; r < V; r++) 
{
    for (c = 0; c < V; c++) 
{
      weightTable[r][c] = INF;
    }
  }
  weightTable[wtTableR++][src] = 0;

  // vertices that are marked//

  int markedVertices[V] = {-1};
  markedVertices[markedVerticesIdx++] = src;
  currVertex = src;

  // find shortest path //
  while(currVertex != dest) {

    //  copy marked values to the next row of weightTable //

    for (i = 0; i < markedVerticesIdx; i++) 
{
      c = markedVertices[i];
      weightTable[wtTableR][c] = weightTable[wtTableR - 1][c];
    }

    /*** find the weight from the current vertex to all the other vertices that are directly connected and not yet marked */

    for (c = 0; c < V; c++) 
{

      if (c != currVertex && !isMarked(c, markedVertices, markedVerticesIdx)) 
{

        edgeWt = graph[currVertex][c];
        destValue = weightTable[wtTableR - 1][c];
        markedValue = weightTable[wtTableR][currVertex];

        min = findMin(destValue, markedValue + edgeWt);

        weightTable[wtTableR][c] = min;

      }

    }

    /** * find minimum unmarked vertices in current row */

    min = INF;
    for (c = 0; c < V; c++) {

      if (!isMarked(c, markedVertices, markedVerticesIdx)) 
{
        if (weightTable[wtTableR][c] < min) 
{
          min = weightTable[wtTableR][c];
          tmpC = c;
        }
      }

    }

    /*** found a new vertex for marking */

    markedVertices[markedVerticesIdx++] = tmpC;
    currVertex = tmpC;
    
    /** * variables update */

    wtTableR++;

  }

  /*** compute shortest path vertices */

  c = dest;
  shortestPathVertices[shortestPathVerticesIdx++] = c;
  markedValue = weightTable[wtTableR - 1][dest];
  for (r = wtTableR - 2; r >= 0; r--) 
{

    if (weightTable[r][c] != markedValue) 
{
      c = markedVertices[r];
      markedValue = weightTable[r][c];
      shortestPathVertices[shortestPathVerticesIdx++] = c;
    }

  }

  /*** display the weight and shortest path */

  printf("Shortest Path between %d and %d\n", src, dest);
  for (i = shortestPathVerticesIdx-1; i >= 0; i--) 
{
    printf("%d", shortestPathVertices[i]);
    if (i > 0) 
{
      printf(" --> ");
    }
  }
  printf("\n");
  printf("Weight of the path: %d\n", weightTable[wtTableR-1][dest]);

}

int main(void) 
{

  /** * 2d array which holds the weight of the edges   */  
  int graph[V][V] = 
{
    {0, 5, 10, INF},
    {5, 0, 4, 11},
    {10, 4, 0, 5},
    {INF, 11, 5, 0}
  };

  /** * source and destination vertices */
  int src = 0;
  int dest = 3;

  /** * find shortest path  */
  dijkstra(graph, src, dest);

  return 0;
}

Output:
Shortest Path between 0 and 3
0 --> 1 --> 2 --> 3
Weight of the path: 14

//EXP-4 - CRC-CCITT Polynomial to obtain CRC Code////

#include<stdio.h>
int a[100], b[100], i, j, len, k, count = 0;

//Generator Polynomial:g(x)=x^16+x^12+x^5+1

int gp[] = { 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, };

int
main ()
{
  void div ();
  printf ("\nEnter the length of Data Frame :");
  scanf ("%d", &len);
  printf ("\nEnter the Message :");
  for (i = 0; i < len; i++)
    scanf ("%d", &a[i]);

  //Append r (16) degree Zeros to Msg bits//

  for (i = 0; i < 16; i++)
    a[len++] = 0;

//Xr.M(x)  (ie. Msg+16 Zeros)

  for (i = 0; i < len; i++)
    b[i] = a[i];

  //No of times to be divided ie. Message Length
  k = len - 16;
  div ();
  for (i = 0; i < len; i++)
    b[i] = b[i] ^ a[i];		//MOD 2 Subtraction
  printf ("\nData to be transmitted : ");
  for (i = 0; i < len; i++)
    printf ("%2d", b[i]);

  printf ("\n\nEnter the Reveived Data : ");
  for (i = 0; i < len; i++)
    scanf ("%d", &a[i]);

  div ();

  for (i = 0; i < len; i++)
    if (a[i] != 0)
      {
	printf ("\nERROR in Recived Data");
	return 0;
      }
  printf ("\nData Recived is ERROR FREE");
}

void
div ()
{
  for (i = 0; i < k; i++)
    {
      if (a[i] == gp[0])
	{
	  for (j = i; j < 17 + i; j++)
	    a[j] = a[j] ^ gp[count++];
	}
      count = 0;
    }
}


//EXP-5////

#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
void main()
{
	int i,j,noframes,x,x1=10,x2;
	noframes=10;
	i=1;
	j=1;
		printf("number of frames is %d ",noframes);

	getch();
	while(noframes>0)
	{
		printf("\nsending frames is %d",i);
		x=rand()%10;
		if(x%10==0)
		{
			for(x2=1;x2<2;x2++)
			{
				printf("\n waiting for %d seconds\n",x2);
				sleep(x2);
			}
			printf("\n sending frames %d\n",i);
			x=rand()%10;
		}
		printf("\n ack for frame %d\n",j);
		noframes=noframes-1;
i++;
j++;
	}
	printf("\n end of stop and wait protocol\n");
	
}
Output:
number of frames is 10                                                                                                                 
sending frames is 1                                                                                                                    
 ack for frame 1                                                                                                                       
                                                                                                                                       
sending frames is 2                                                                                                                    
 ack for frame 2                                                                                                                       
                                                                                                                                       
sending frames is 3                                                                                                                    
 ack for frame 3                                                                                                                       
                                                                                                                                       
sending frames is 4                                                                                                                    
 ack for frame 4                                                                                                                       
                                                                                                                                       
sending frames is 5                                                                                                                    
 ack for frame 5                                                                                                                       
                                                                                                                                       
sending frames is 6                                                                                                                    
 ack for frame 6                                                                                                                       
                                                                                                                                       
sending frames is 7                                                                                                                    
 ack for frame 7                                                                                                                       
                                                                                                                                       
sending frames is 8                                                                                                                    
 ack for frame 8                                                                                                                       
                                                                                                                                       
sending frames is 9                                                                                                                    
 ack for frame 9  
sending frames is 10                                                                                                                   
 ack for frame 10                                                                                                                      
                                                                                                                                       
 end of stop and wait protocol


///C Program : Sliding Window Protocol////

#include<stdio.h>

int
main ()
{
  int w, i, f, frames[50];

  printf ("Enter window size: ");
  scanf ("%d", &w);

  printf ("\nEnter number of frames to transmit: ");
  scanf ("%d", &f);

  printf ("\nEnter %d frames: ", f);

  for (i = 1; i <= f; i++)
    scanf ("%d", &frames[i]);

  printf
    ("\nWith sliding window protocol the frames will be sent in the following manner (assuming no corruption of frames)\n\n");
  printf
    ("After sending %d frames at each stage sender waits for acknowledgement sent by the receiver\n\n",
     w);

  for (i = 1; i <= f; i++)
    {
      if (i % w == 0)
	{
	  printf ("%d\n", frames[i]);
	  printf
	    ("Acknowledgement of above frames sent is received by sender\n\n");
	}
      else
	printf ("%d ", frames[i]);
    }

  if (f % w != 0)
    printf ("\nAcknowledgement of above frames sent is received by sender\n");

  return 0;
}

Output:

Enter window size: 3
Enter number of frames to transmit: 5
Enter 5 frames: 12 5 89 4 6
With sliding window protocol the frames will be sent in the following manner (assuming no corruption of frames)
After sending 3 frames at each stage sender waits for acknowledgement sent by the receiver
12 5 89
Acknowledgement of above frames sent is received by sender
4 6
Acknowledgement of above frames sent is received by sender


///EXP-6//

#include<stdio.h>
#include<stdlib.h>
#define MIN(x,y) (x>y)?y:x
int main()
{
int orate,drop=0,cap,x,count=0,inp[10]={0},i=0,nsec,ch; 
printf("\n enter bucket size : "); 
scanf("%d",&cap);
printf("\n enter output rate :");
scanf("%d",&orate);
do
{
printf("\n enter number of packets coming at second %d :",i+1);
scanf("%d",&inp[i]);
i++;
printf("\n enter 1 to contiue or 0 to quit..........");
scanf("%d",&ch);
}
while(ch);
nsec=i;
printf("\n second \t recieved \t sent \t dropped \t remained \n");
for(i=0;count || i<nsec;i++)
 {
printf("	%d",i+1);
printf(" \t%d\t ",inp[i]);
printf(" \t %d\t ",MIN((inp[i]+count),orate));
 if((x=inp[i]+count-orate)>0)
  {
if(x>cap)
{
count=cap;
drop=x-cap;
}	
else	
{	
count=x;	
drop=0;	
}	
}	
else	
{	
drop=0;	
count=0;	
}
printf(" \t %d		\t %d \n",drop,count);
}
return 0;
}

Output:
 enter bucket size : 10                                                                                                       
                                                                                                                                  
 enter output rate :6                                                                                                                  
                                                                                                                                       
 enter number of packets coming at second 1 :3                                                                                        
                                                                                                                                       
 enter 1 to contiue or 0 to quit..........1                                                                                            
                                                                                                                                       
 enter number of packets coming at second 2 :7                                                                                         
                                                                                                                                       
 enter 1 to contiue or 0 to quit..........1                                                                                            
                                                                                                                                       
 enter number of packets coming at second 3 :9                                                                                         
                                                                                                                                       
 enter 1 to contiue or 0 to quit..........1                                                                                            
                                                                                                                                       
 enter number of packets coming at second 4 :7                                                                                         
                                                                                                                                       
 enter 1 to contiue or 0 to quit..........1                                                                                            
                                                                                                                                       
 enter number of packets coming at second 5 :4                                                                                         
                                                                                                                                       
 enter 1 to contiue or 0 to quit..........0 
 second          recieved        sent    dropped         remained                                                                      
        1       3                3               0                       0                                                             
        2       7                6               0                       1                                                             
        3       9                6               0                       4                                                             
        4       7                6               0                       5                                                             
        5       4                6               0                       3                                                             
        6       0                3               0                       0 

